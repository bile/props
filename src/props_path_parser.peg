%% Property path DSL
%% props_path_parser.peg
%%
%% Copyright 2011-2012 Grey Area
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
%%
%%
%% Very similar to JSON paths in JavaScript:
%%
%% Example:
%%   foo.bar[2].baz
%%
%% Paths can be either a string or an atom so both
%%   foo.bar
%% and
%%   "foo.bar"
%% will work the same.
%%
%% Indexes are 1-based, just like Erlang's lists module.
%%
%% Inspired by:
%% http://www.progski.net/blog/2010/destructuring_json_in_erlang_made_easy.html

path <- var ('[' int ']')? ('.' path)? `
  case Node of
      [Var, [], []] ->
          [{prop, Var}];
      [Var, [_, I, _], []] ->
          [{prop, Var}, {index, I}];
      [Var, [], [_, Rest]] ->
          [{prop, Var}] ++ Rest;
      [Var, [_, I, _], [_, Rest]] ->
          [{prop, Var}, {index, I}] ++ Rest
  end`;

int <- [0-9]+ `
  list_to_integer(binary_to_list(list_to_binary(Node)))`;

var <- [-_a-zA-Z0-9] [-:\s_a-zA-Z0-9]* `
  list_to_binary(Node)`;
